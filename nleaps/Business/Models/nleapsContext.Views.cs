//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(nleaps.nleapsContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsc6f2decf9768cafd54a18c25c339837c59969b763ee0281536119705945da9ed))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsc6f2decf9768cafd54a18c25c339837c59969b763ee0281536119705945da9ed : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "c6f2decf9768cafd54a18c25c339837c59969b763ee0281536119705945da9ed"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.ArticleCategory")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Article")
            {
                return GetView1();
            }

            if (extentName == "nleapsContext.ArticleCategorys")
            {
                return GetView2();
            }

            if (extentName == "nleapsContext.ArticleCategory_Parent")
            {
                return GetView3();
            }

            if (extentName == "nleapsContext.Articles")
            {
                return GetView4();
            }

            if (extentName == "nleapsContext.Article_ArticleCategory")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.Config")
            {
                return GetView6();
            }

            if (extentName == "nleapsContext.Configs")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.Dept")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.User")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.DocConsult")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.FormType")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.Role")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.Power")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.Title")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.Form")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.Menu")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.Online")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.RolePower")
            {
                return GetView18();
            }

            if (extentName == "CodeFirstDatabase.RoleUser")
            {
                return GetView19();
            }

            if (extentName == "CodeFirstDatabase.TitleUser")
            {
                return GetView20();
            }

            if (extentName == "nleapsContext.Depts")
            {
                return GetView21();
            }

            if (extentName == "nleapsContext.Dept_Parent")
            {
                return GetView22();
            }

            if (extentName == "nleapsContext.Users")
            {
                return GetView23();
            }

            if (extentName == "nleapsContext.FormType_Users")
            {
                return GetView24();
            }

            if (extentName == "nleapsContext.Dept_Users")
            {
                return GetView25();
            }

            if (extentName == "nleapsContext.DocConsults")
            {
                return GetView26();
            }

            if (extentName == "nleapsContext.DocConsult_User")
            {
                return GetView27();
            }

            if (extentName == "nleapsContext.FormTypes")
            {
                return GetView28();
            }

            if (extentName == "nleapsContext.FormType_Children")
            {
                return GetView29();
            }

            if (extentName == "nleapsContext.Roles")
            {
                return GetView30();
            }

            if (extentName == "nleapsContext.Powers")
            {
                return GetView31();
            }

            if (extentName == "nleapsContext.Titles")
            {
                return GetView32();
            }

            if (extentName == "nleapsContext.Forms")
            {
                return GetView33();
            }

            if (extentName == "nleapsContext.Form_FormType")
            {
                return GetView34();
            }

            if (extentName == "nleapsContext.Form_User")
            {
                return GetView35();
            }

            if (extentName == "nleapsContext.Menus")
            {
                return GetView36();
            }

            if (extentName == "nleapsContext.Menu_Parent")
            {
                return GetView37();
            }

            if (extentName == "nleapsContext.Menu_ViewPower")
            {
                return GetView38();
            }

            if (extentName == "nleapsContext.Onlines")
            {
                return GetView39();
            }

            if (extentName == "nleapsContext.Online_User")
            {
                return GetView40();
            }

            if (extentName == "nleapsContext.Role_Powers")
            {
                return GetView41();
            }

            if (extentName == "nleapsContext.Role_Users")
            {
                return GetView42();
            }

            if (extentName == "nleapsContext.Title_Users")
            {
                return GetView43();
            }

            if (extentName == "CodeFirstDatabase.Log")
            {
                return GetView44();
            }

            if (extentName == "nleapsContext.Logs")
            {
                return GetView45();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.ArticleCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ArticleCategory
        [CodeFirstDatabaseSchema.ArticleCategory](T3.ArticleCategory_ID, T3.ArticleCategory_Name, T3.ArticleCategory_sort, T3.ArticleCategory_Remark, T3.ArticleCategory_CreateTime, T3.ArticleCategory_ParentID)
    FROM (
        SELECT T1.ArticleCategory_ID, T1.ArticleCategory_Name, T1.ArticleCategory_sort, T1.ArticleCategory_Remark, T1.ArticleCategory_CreateTime, T2.ArticleCategory_ParentID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS ArticleCategory_ID, 
                T.Name AS ArticleCategory_Name, 
                T.sort AS ArticleCategory_sort, 
                T.Remark AS ArticleCategory_Remark, 
                T.CreateTime AS ArticleCategory_CreateTime, 
                True AS _from0
            FROM nleapsContext.ArticleCategorys AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.ArticleCategory_Parent_Source).ID AS ArticleCategory_ID, 
                Key(T.ArticleCategory_Parent_Target).ID AS ArticleCategory_ParentID, 
                True AS _from1
            FROM nleapsContext.ArticleCategory_Parent AS T) AS T2
            ON T1.ArticleCategory_ID = T2.ArticleCategory_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Article.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Article
        [CodeFirstDatabaseSchema.Article](T3.Article_ID, T3.Article_Title, T3.Article_Name, T3.Article_ReleaseDept, T3.Article_Author, T3.Article_CreateTime, T3.Article_UpdateTime, T3.Article_Content, T3.Article_KeyWord, T3.Article_ArticleCategoryID)
    FROM (
        SELECT T1.Article_ID, T1.Article_Title, T1.Article_Name, T1.Article_ReleaseDept, T1.Article_Author, T1.Article_CreateTime, T1.Article_UpdateTime, T1.Article_Content, T1.Article_KeyWord, T2.Article_ArticleCategoryID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS Article_ID, 
                T.Title AS Article_Title, 
                T.Name AS Article_Name, 
                T.ReleaseDept AS Article_ReleaseDept, 
                T.Author AS Article_Author, 
                T.CreateTime AS Article_CreateTime, 
                T.UpdateTime AS Article_UpdateTime, 
                T.Content AS Article_Content, 
                T.KeyWord AS Article_KeyWord, 
                True AS _from0
            FROM nleapsContext.Articles AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Article_ArticleCategory_Source).ID AS Article_ID, 
                Key(T.Article_ArticleCategory_Target).ID AS Article_ArticleCategoryID, 
                True AS _from1
            FROM nleapsContext.Article_ArticleCategory AS T) AS T2
            ON T1.Article_ID = T2.Article_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.ArticleCategorys.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ArticleCategorys
        [nleaps.ArticleCategory](T1.ArticleCategory_ID, T1.ArticleCategory_Name, T1.ArticleCategory_sort, T1.ArticleCategory_Remark, T1.ArticleCategory_CreateTime) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.ArticleCategorys, ROW(T1.[ArticleCategory_Parent.ArticleCategory_Parent_Target.ID]),[nleaps.ArticleCategory]),[nleaps.ArticleCategory_Parent],ArticleCategory_Parent_Source,ArticleCategory_Parent_Target) 
    FROM (
        SELECT 
            T.ID AS ArticleCategory_ID, 
            T.Name AS ArticleCategory_Name, 
            T.sort AS ArticleCategory_sort, 
            T.Remark AS ArticleCategory_Remark, 
            T.CreateTime AS ArticleCategory_CreateTime, 
            True AS _from0, 
            T.ParentID AS [ArticleCategory_Parent.ArticleCategory_Parent_Target.ID]
        FROM CodeFirstDatabase.ArticleCategory AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.ArticleCategory_Parent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ArticleCategory_Parent
        [nleaps.ArticleCategory_Parent](T3.[ArticleCategory_Parent.ArticleCategory_Parent_Source], T3.[ArticleCategory_Parent.ArticleCategory_Parent_Target])
    FROM (
        SELECT -- Constructing ArticleCategory_Parent_Source
            CreateRef(nleapsContext.ArticleCategorys, row(T2.[ArticleCategory_Parent.ArticleCategory_Parent_Source.ID]), [nleaps.ArticleCategory]) AS [ArticleCategory_Parent.ArticleCategory_Parent_Source], 
            T2.[ArticleCategory_Parent.ArticleCategory_Parent_Target]
        FROM (
            SELECT -- Constructing ArticleCategory_Parent_Target
                T1.[ArticleCategory_Parent.ArticleCategory_Parent_Source.ID], 
                CreateRef(nleapsContext.ArticleCategorys, row(T1.[ArticleCategory_Parent.ArticleCategory_Parent_Target.ID]), [nleaps.ArticleCategory]) AS [ArticleCategory_Parent.ArticleCategory_Parent_Target]
            FROM (
                SELECT 
                    T.ID AS [ArticleCategory_Parent.ArticleCategory_Parent_Source.ID], 
                    T.ParentID AS [ArticleCategory_Parent.ArticleCategory_Parent_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.ArticleCategory AS T
                WHERE T.ParentID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Articles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Articles
        [nleaps.Article](T1.Article_ID, T1.Article_Title, T1.Article_Name, T1.Article_ReleaseDept, T1.Article_Author, T1.Article_CreateTime, T1.Article_UpdateTime, T1.Article_Content, T1.Article_KeyWord) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.ArticleCategorys, ROW(T1.[Article_ArticleCategory.Article_ArticleCategory_Target.ID]),[nleaps.ArticleCategory]),[nleaps.Article_ArticleCategory],Article_ArticleCategory_Source,Article_ArticleCategory_Target) 
    FROM (
        SELECT 
            T.ID AS Article_ID, 
            T.Title AS Article_Title, 
            T.Name AS Article_Name, 
            T.ReleaseDept AS Article_ReleaseDept, 
            T.Author AS Article_Author, 
            T.CreateTime AS Article_CreateTime, 
            T.UpdateTime AS Article_UpdateTime, 
            T.Content AS Article_Content, 
            T.KeyWord AS Article_KeyWord, 
            True AS _from0, 
            T.ArticleCategoryID AS [Article_ArticleCategory.Article_ArticleCategory_Target.ID]
        FROM CodeFirstDatabase.Article AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Article_ArticleCategory.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Article_ArticleCategory
        [nleaps.Article_ArticleCategory](T3.[Article_ArticleCategory.Article_ArticleCategory_Source], T3.[Article_ArticleCategory.Article_ArticleCategory_Target])
    FROM (
        SELECT -- Constructing Article_ArticleCategory_Source
            CreateRef(nleapsContext.Articles, row(T2.[Article_ArticleCategory.Article_ArticleCategory_Source.ID]), [nleaps.Article]) AS [Article_ArticleCategory.Article_ArticleCategory_Source], 
            T2.[Article_ArticleCategory.Article_ArticleCategory_Target]
        FROM (
            SELECT -- Constructing Article_ArticleCategory_Target
                T1.[Article_ArticleCategory.Article_ArticleCategory_Source.ID], 
                CreateRef(nleapsContext.ArticleCategorys, row(T1.[Article_ArticleCategory.Article_ArticleCategory_Target.ID]), [nleaps.ArticleCategory]) AS [Article_ArticleCategory.Article_ArticleCategory_Target]
            FROM (
                SELECT 
                    T.ID AS [Article_ArticleCategory.Article_ArticleCategory_Source.ID], 
                    T.ArticleCategoryID AS [Article_ArticleCategory.Article_ArticleCategory_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Article AS T
                WHERE T.ArticleCategoryID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Config.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Config
        [CodeFirstDatabaseSchema.Config](T1.Config_ID, T1.Config_ConfigKey, T1.Config_ConfigValue, T1.Config_Remark)
    FROM (
        SELECT 
            T.ID AS Config_ID, 
            T.ConfigKey AS Config_ConfigKey, 
            T.ConfigValue AS Config_ConfigValue, 
            T.Remark AS Config_Remark, 
            True AS _from0
        FROM nleapsContext.Configs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Configs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Configs
        [nleaps.Config](T1.Config_ID, T1.Config_ConfigKey, T1.Config_ConfigValue, T1.Config_Remark)
    FROM (
        SELECT 
            T.ID AS Config_ID, 
            T.ConfigKey AS Config_ConfigKey, 
            T.ConfigValue AS Config_ConfigValue, 
            T.Remark AS Config_Remark, 
            True AS _from0
        FROM CodeFirstDatabase.Config AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Dept.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Dept
        [CodeFirstDatabaseSchema.Dept](T3.Dept_ID, T3.Dept_Name, T3.Dept_SortIndex, T3.Dept_Remark, T3.Dept_ParentID)
    FROM (
        SELECT T1.Dept_ID, T1.Dept_Name, T1.Dept_SortIndex, T1.Dept_Remark, T2.Dept_ParentID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS Dept_ID, 
                T.Name AS Dept_Name, 
                T.SortIndex AS Dept_SortIndex, 
                T.Remark AS Dept_Remark, 
                True AS _from0
            FROM nleapsContext.Depts AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Dept_Parent_Source).ID AS Dept_ID, 
                Key(T.Dept_Parent_Target).ID AS Dept_ParentID, 
                True AS _from1
            FROM nleapsContext.Dept_Parent AS T) AS T2
            ON T1.Dept_ID = T2.Dept_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing User
        [CodeFirstDatabaseSchema.User](T4.User_ID, T4.User_Name, T4.User_Email, T4.User_Password, T4.User_Enabled, T4.User_Gender, T4.User_ChineseName, T4.User_EnglishName, T4.User_Photo, T4.User_QQ, T4.User_CompanyEmail, T4.User_OfficePhone, T4.User_OfficePhoneExt, T4.User_HomePhone, T4.User_CellPhone, T4.User_Address, T4.User_Remark, T4.User_IdentityCard, T4.User_Birthday, T4.User_TakeOfficeTime, T4.User_LastLoginTime, T4.User_CreateTime, T4.[User.FormType_ID], T4.User_DeptID)
    FROM (
        SELECT T1.User_ID, T1.User_Name, T1.User_Email, T1.User_Password, T1.User_Enabled, T1.User_Gender, T1.User_ChineseName, T1.User_EnglishName, T1.User_Photo, T1.User_QQ, T1.User_CompanyEmail, T1.User_OfficePhone, T1.User_OfficePhoneExt, T1.User_HomePhone, T1.User_CellPhone, T1.User_Address, T1.User_Remark, T1.User_IdentityCard, T1.User_Birthday, T1.User_TakeOfficeTime, T1.User_LastLoginTime, T1.User_CreateTime, T2.[User.FormType_ID], T3.User_DeptID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.ID AS User_ID, 
                T.Name AS User_Name, 
                T.Email AS User_Email, 
                T.Password AS User_Password, 
                T.Enabled AS User_Enabled, 
                T.Gender AS User_Gender, 
                T.ChineseName AS User_ChineseName, 
                T.EnglishName AS User_EnglishName, 
                T.Photo AS User_Photo, 
                T.QQ AS User_QQ, 
                T.CompanyEmail AS User_CompanyEmail, 
                T.OfficePhone AS User_OfficePhone, 
                T.OfficePhoneExt AS User_OfficePhoneExt, 
                T.HomePhone AS User_HomePhone, 
                T.CellPhone AS User_CellPhone, 
                T.Address AS User_Address, 
                T.Remark AS User_Remark, 
                T.IdentityCard AS User_IdentityCard, 
                T.Birthday AS User_Birthday, 
                T.TakeOfficeTime AS User_TakeOfficeTime, 
                T.LastLoginTime AS User_LastLoginTime, 
                T.CreateTime AS User_CreateTime, 
                True AS _from0
            FROM nleapsContext.Users AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FormType_Users_Target).ID AS User_ID, 
                Key(T.FormType_Users_Source).ID AS [User.FormType_ID], 
                True AS _from1
            FROM nleapsContext.FormType_Users AS T) AS T2
            ON T1.User_ID = T2.User_ID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Dept_Users_Target).ID AS User_ID, 
                Key(T.Dept_Users_Source).ID AS User_DeptID, 
                True AS _from2
            FROM nleapsContext.Dept_Users AS T) AS T3
            ON T1.User_ID = T3.User_ID
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.DocConsult.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DocConsult
        [CodeFirstDatabaseSchema.DocConsult](T3.DocConsult_ID, T3.DocConsult_Name, T3.DocConsult_Header, T3.DocConsult_ReleaseDept, T3.DocConsult_ReleaseDateTime, T3.[DocConsult.User_ID])
    FROM (
        SELECT T1.DocConsult_ID, T1.DocConsult_Name, T1.DocConsult_Header, T1.DocConsult_ReleaseDept, T1.DocConsult_ReleaseDateTime, T2.[DocConsult.User_ID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS DocConsult_ID, 
                T.Name AS DocConsult_Name, 
                T.Header AS DocConsult_Header, 
                T.ReleaseDept AS DocConsult_ReleaseDept, 
                T.ReleaseDateTime AS DocConsult_ReleaseDateTime, 
                True AS _from0
            FROM nleapsContext.DocConsults AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.DocConsult_User_Source).ID AS DocConsult_ID, 
                Key(T.DocConsult_User_Target).ID AS [DocConsult.User_ID], 
                True AS _from1
            FROM nleapsContext.DocConsult_User AS T) AS T2
            ON T1.DocConsult_ID = T2.DocConsult_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.FormType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormType
        [CodeFirstDatabaseSchema.FormType](T3.FormType_ID, T3.FormType_Name, T3.FormType_SortIndex, T3.[FormType.Parent_ID])
    FROM (
        SELECT T1.FormType_ID, T1.FormType_Name, T1.FormType_SortIndex, T2.[FormType.Parent_ID], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.ID AS FormType_ID, 
                T.Name AS FormType_Name, 
                T.SortIndex AS FormType_SortIndex, 
                True AS _from0
            FROM nleapsContext.FormTypes AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.FormType_Children_Target).ID AS FormType_ID, 
                Key(T.FormType_Children_Source).ID AS [FormType.Parent_ID], 
                True AS _from1
            FROM nleapsContext.FormType_Children AS T) AS T2
            ON T1.FormType_ID = T2.FormType_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Role.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role
        [CodeFirstDatabaseSchema.Role](T1.Role_ID, T1.Role_Name, T1.Role_Remark)
    FROM (
        SELECT 
            T.ID AS Role_ID, 
            T.Name AS Role_Name, 
            T.Remark AS Role_Remark, 
            True AS _from0
        FROM nleapsContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Power.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Power
        [CodeFirstDatabaseSchema.Power](T1.Power_ID, T1.Power_Name, T1.Power_GroupName, T1.Power_Title, T1.Power_Remark)
    FROM (
        SELECT 
            T.ID AS Power_ID, 
            T.Name AS Power_Name, 
            T.GroupName AS Power_GroupName, 
            T.Title AS Power_Title, 
            T.Remark AS Power_Remark, 
            True AS _from0
        FROM nleapsContext.Powers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Title.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Title
        [CodeFirstDatabaseSchema.Title](T1.Title_ID, T1.Title_Name, T1.Title_Remark)
    FROM (
        SELECT 
            T.ID AS Title_ID, 
            T.Name AS Title_Name, 
            T.Remark AS Title_Remark, 
            True AS _from0
        FROM nleapsContext.Titles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Form.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Form
        [CodeFirstDatabaseSchema.Form](T4.Form_ID, T4.Form_FormName, T4.Form_Content, T4.Form_CreateTime, T4.Form_FromTypeID, T4.Form_UserID)
    FROM (
        SELECT T1.Form_ID, T1.Form_FormName, T1.Form_Content, T1.Form_CreateTime, T2.Form_FromTypeID, T3.Form_UserID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.ID AS Form_ID, 
                T.FormName AS Form_FormName, 
                T.Content AS Form_Content, 
                T.CreateTime AS Form_CreateTime, 
                True AS _from0
            FROM nleapsContext.Forms AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Form_FormType_Source).ID AS Form_ID, 
                Key(T.Form_FormType_Target).ID AS Form_FromTypeID, 
                True AS _from1
            FROM nleapsContext.Form_FormType AS T) AS T2
            ON T1.Form_ID = T2.Form_ID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Form_User_Source).ID AS Form_ID, 
                Key(T.Form_User_Target).ID AS Form_UserID, 
                True AS _from2
            FROM nleapsContext.Form_User AS T) AS T3
            ON T1.Form_ID = T3.Form_ID
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Menu.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Menu
        [CodeFirstDatabaseSchema.Menu](T4.Menu_ID, T4.Menu_Name, T4.Menu_ImageUrl, T4.Menu_NavigateUrl, T4.Menu_Remark, T4.Menu_SortIndex, T4.Menu_ParentID, T4.Menu_ViewPowerID)
    FROM (
        SELECT T1.Menu_ID, T1.Menu_Name, T1.Menu_ImageUrl, T1.Menu_NavigateUrl, T1.Menu_Remark, T1.Menu_SortIndex, T2.Menu_ParentID, T3.Menu_ViewPowerID, T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1, (T3._from2 AND T3._from2 IS NOT NULL) AS _from2
        FROM  (
            SELECT 
                T.ID AS Menu_ID, 
                T.Name AS Menu_Name, 
                T.ImageUrl AS Menu_ImageUrl, 
                T.NavigateUrl AS Menu_NavigateUrl, 
                T.Remark AS Menu_Remark, 
                T.SortIndex AS Menu_SortIndex, 
                True AS _from0
            FROM nleapsContext.Menus AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Menu_Parent_Source).ID AS Menu_ID, 
                Key(T.Menu_Parent_Target).ID AS Menu_ParentID, 
                True AS _from1
            FROM nleapsContext.Menu_Parent AS T) AS T2
            ON T1.Menu_ID = T2.Menu_ID
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Menu_ViewPower_Source).ID AS Menu_ID, 
                Key(T.Menu_ViewPower_Target).ID AS Menu_ViewPowerID, 
                True AS _from2
            FROM nleapsContext.Menu_ViewPower AS T) AS T3
            ON T1.Menu_ID = T3.Menu_ID
    ) AS T4");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Online.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Online
        [CodeFirstDatabaseSchema.Online](T3.Online_ID, T3.Online_IPAdddress, T3.Online_LoginTime, T3.Online_UpdateTime, T3.Online_UserID)
    FROM (
        SELECT T1.Online_ID, T2.Online_IPAdddress, T2.Online_LoginTime, T2.Online_UpdateTime, T1.Online_UserID, T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.Online_User_Source).ID AS Online_ID, 
                Key(T.Online_User_Target).ID AS Online_UserID, 
                True AS _from1
            FROM nleapsContext.Online_User AS T) AS T1
            INNER JOIN (
            SELECT 
                T.ID AS Online_ID, 
                T.IPAdddress AS Online_IPAdddress, 
                T.LoginTime AS Online_LoginTime, 
                T.UpdateTime AS Online_UpdateTime, 
                True AS _from0
            FROM nleapsContext.Onlines AS T) AS T2
            ON T1.Online_ID = T2.Online_ID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RolePower.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RolePower
        [CodeFirstDatabaseSchema.RolePower](T1.RolePower_RoleID, T1.RolePower_PowerID)
    FROM (
        SELECT 
            Key(T.Role_Powers_Source).ID AS RolePower_RoleID, 
            Key(T.Role_Powers_Target).ID AS RolePower_PowerID, 
            True AS _from0
        FROM nleapsContext.Role_Powers AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.RoleUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RoleUser
        [CodeFirstDatabaseSchema.RoleUser](T1.RoleUser_RoleID, T1.RoleUser_UserID)
    FROM (
        SELECT 
            Key(T.Role_Users_Source).ID AS RoleUser_RoleID, 
            Key(T.Role_Users_Target).ID AS RoleUser_UserID, 
            True AS _from0
        FROM nleapsContext.Role_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.TitleUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing TitleUser
        [CodeFirstDatabaseSchema.TitleUser](T1.TitleUser_TitleID, T1.TitleUser_UserID)
    FROM (
        SELECT 
            Key(T.Title_Users_Source).ID AS TitleUser_TitleID, 
            Key(T.Title_Users_Target).ID AS TitleUser_UserID, 
            True AS _from0
        FROM nleapsContext.Title_Users AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Depts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Depts
        [nleaps.Dept](T1.Dept_ID, T1.Dept_Name, T1.Dept_SortIndex, T1.Dept_Remark) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.Depts, ROW(T1.[Dept_Parent.Dept_Parent_Target.ID]),[nleaps.Dept]),[nleaps.Dept_Parent],Dept_Parent_Source,Dept_Parent_Target) 
    FROM (
        SELECT 
            T.ID AS Dept_ID, 
            T.Name AS Dept_Name, 
            T.SortIndex AS Dept_SortIndex, 
            T.Remark AS Dept_Remark, 
            True AS _from0, 
            T.ParentID AS [Dept_Parent.Dept_Parent_Target.ID]
        FROM CodeFirstDatabase.Dept AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Dept_Parent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Dept_Parent
        [nleaps.Dept_Parent](T3.[Dept_Parent.Dept_Parent_Source], T3.[Dept_Parent.Dept_Parent_Target])
    FROM (
        SELECT -- Constructing Dept_Parent_Source
            CreateRef(nleapsContext.Depts, row(T2.[Dept_Parent.Dept_Parent_Source.ID]), [nleaps.Dept]) AS [Dept_Parent.Dept_Parent_Source], 
            T2.[Dept_Parent.Dept_Parent_Target]
        FROM (
            SELECT -- Constructing Dept_Parent_Target
                T1.[Dept_Parent.Dept_Parent_Source.ID], 
                CreateRef(nleapsContext.Depts, row(T1.[Dept_Parent.Dept_Parent_Target.ID]), [nleaps.Dept]) AS [Dept_Parent.Dept_Parent_Target]
            FROM (
                SELECT 
                    T.ID AS [Dept_Parent.Dept_Parent_Source.ID], 
                    T.ParentID AS [Dept_Parent.Dept_Parent_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Dept AS T
                WHERE T.ParentID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Users
        [nleaps.User](T1.User_ID, T1.User_Name, T1.User_Email, T1.User_Password, T1.User_Enabled, T1.User_Gender, T1.User_ChineseName, T1.User_EnglishName, T1.User_Photo, T1.User_QQ, T1.User_CompanyEmail, T1.User_OfficePhone, T1.User_OfficePhoneExt, T1.User_HomePhone, T1.User_CellPhone, T1.User_Address, T1.User_Remark, T1.User_IdentityCard, T1.User_Birthday, T1.User_TakeOfficeTime, T1.User_LastLoginTime, T1.User_CreateTime) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.FormTypes, ROW(T1.[FormType_Users.FormType_Users_Source.ID]),[nleaps.FormType]),[nleaps.FormType_Users],FormType_Users_Target,FormType_Users_Source) 
        RELATIONSHIP(CREATEREF(nleapsContext.Depts, ROW(T1.[Dept_Users.Dept_Users_Source.ID]),[nleaps.Dept]),[nleaps.Dept_Users],Dept_Users_Target,Dept_Users_Source) 
    FROM (
        SELECT 
            T.ID AS User_ID, 
            T.Name AS User_Name, 
            T.Email AS User_Email, 
            T.Password AS User_Password, 
            T.Enabled AS User_Enabled, 
            T.Gender AS User_Gender, 
            T.ChineseName AS User_ChineseName, 
            T.EnglishName AS User_EnglishName, 
            T.Photo AS User_Photo, 
            T.QQ AS User_QQ, 
            T.CompanyEmail AS User_CompanyEmail, 
            T.OfficePhone AS User_OfficePhone, 
            T.OfficePhoneExt AS User_OfficePhoneExt, 
            T.HomePhone AS User_HomePhone, 
            T.CellPhone AS User_CellPhone, 
            T.Address AS User_Address, 
            T.Remark AS User_Remark, 
            T.IdentityCard AS User_IdentityCard, 
            T.Birthday AS User_Birthday, 
            T.TakeOfficeTime AS User_TakeOfficeTime, 
            T.LastLoginTime AS User_LastLoginTime, 
            T.CreateTime AS User_CreateTime, 
            True AS _from0, 
            T.FormType_ID AS [FormType_Users.FormType_Users_Source.ID], 
            T.DeptID AS [Dept_Users.Dept_Users_Source.ID]
        FROM CodeFirstDatabase.User AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.FormType_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormType_Users
        [nleaps.FormType_Users](T3.[FormType_Users.FormType_Users_Source], T3.[FormType_Users.FormType_Users_Target])
    FROM (
        SELECT -- Constructing FormType_Users_Source
            CreateRef(nleapsContext.FormTypes, row(T2.[FormType_Users.FormType_Users_Source.ID]), [nleaps.FormType]) AS [FormType_Users.FormType_Users_Source], 
            T2.[FormType_Users.FormType_Users_Target]
        FROM (
            SELECT -- Constructing FormType_Users_Target
                T1.[FormType_Users.FormType_Users_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[FormType_Users.FormType_Users_Target.ID]), [nleaps.User]) AS [FormType_Users.FormType_Users_Target]
            FROM (
                SELECT 
                    T.FormType_ID AS [FormType_Users.FormType_Users_Source.ID], 
                    T.ID AS [FormType_Users.FormType_Users_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.FormType_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Dept_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Dept_Users
        [nleaps.Dept_Users](T3.[Dept_Users.Dept_Users_Source], T3.[Dept_Users.Dept_Users_Target])
    FROM (
        SELECT -- Constructing Dept_Users_Source
            CreateRef(nleapsContext.Depts, row(T2.[Dept_Users.Dept_Users_Source.ID]), [nleaps.Dept]) AS [Dept_Users.Dept_Users_Source], 
            T2.[Dept_Users.Dept_Users_Target]
        FROM (
            SELECT -- Constructing Dept_Users_Target
                T1.[Dept_Users.Dept_Users_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[Dept_Users.Dept_Users_Target.ID]), [nleaps.User]) AS [Dept_Users.Dept_Users_Target]
            FROM (
                SELECT 
                    T.DeptID AS [Dept_Users.Dept_Users_Source.ID], 
                    T.ID AS [Dept_Users.Dept_Users_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.User AS T
                WHERE T.DeptID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.DocConsults.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DocConsults
        [nleaps.DocConsult](T1.DocConsult_ID, T1.DocConsult_Name, T1.DocConsult_Header, T1.DocConsult_ReleaseDept, T1.DocConsult_ReleaseDateTime) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.Users, ROW(T1.[DocConsult_User.DocConsult_User_Target.ID]),[nleaps.User]),[nleaps.DocConsult_User],DocConsult_User_Source,DocConsult_User_Target) 
    FROM (
        SELECT 
            T.ID AS DocConsult_ID, 
            T.Name AS DocConsult_Name, 
            T.Header AS DocConsult_Header, 
            T.ReleaseDept AS DocConsult_ReleaseDept, 
            T.ReleaseDateTime AS DocConsult_ReleaseDateTime, 
            True AS _from0, 
            T.User_ID AS [DocConsult_User.DocConsult_User_Target.ID]
        FROM CodeFirstDatabase.DocConsult AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.DocConsult_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DocConsult_User
        [nleaps.DocConsult_User](T3.[DocConsult_User.DocConsult_User_Source], T3.[DocConsult_User.DocConsult_User_Target])
    FROM (
        SELECT -- Constructing DocConsult_User_Source
            CreateRef(nleapsContext.DocConsults, row(T2.[DocConsult_User.DocConsult_User_Source.ID]), [nleaps.DocConsult]) AS [DocConsult_User.DocConsult_User_Source], 
            T2.[DocConsult_User.DocConsult_User_Target]
        FROM (
            SELECT -- Constructing DocConsult_User_Target
                T1.[DocConsult_User.DocConsult_User_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[DocConsult_User.DocConsult_User_Target.ID]), [nleaps.User]) AS [DocConsult_User.DocConsult_User_Target]
            FROM (
                SELECT 
                    T.ID AS [DocConsult_User.DocConsult_User_Source.ID], 
                    T.User_ID AS [DocConsult_User.DocConsult_User_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.DocConsult AS T
                WHERE T.User_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.FormTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormTypes
        [nleaps.FormType](T1.FormType_ID, T1.FormType_Name, T1.FormType_SortIndex) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.FormTypes, ROW(T1.[FormType_Children.FormType_Children_Source.ID]),[nleaps.FormType]),[nleaps.FormType_Children],FormType_Children_Target,FormType_Children_Source) 
    FROM (
        SELECT 
            T.ID AS FormType_ID, 
            T.Name AS FormType_Name, 
            T.SortIndex AS FormType_SortIndex, 
            True AS _from0, 
            T.Parent_ID AS [FormType_Children.FormType_Children_Source.ID]
        FROM CodeFirstDatabase.FormType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.FormType_Children.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FormType_Children
        [nleaps.FormType_Children](T3.[FormType_Children.FormType_Children_Source], T3.[FormType_Children.FormType_Children_Target])
    FROM (
        SELECT -- Constructing FormType_Children_Source
            CreateRef(nleapsContext.FormTypes, row(T2.[FormType_Children.FormType_Children_Source.ID]), [nleaps.FormType]) AS [FormType_Children.FormType_Children_Source], 
            T2.[FormType_Children.FormType_Children_Target]
        FROM (
            SELECT -- Constructing FormType_Children_Target
                T1.[FormType_Children.FormType_Children_Source.ID], 
                CreateRef(nleapsContext.FormTypes, row(T1.[FormType_Children.FormType_Children_Target.ID]), [nleaps.FormType]) AS [FormType_Children.FormType_Children_Target]
            FROM (
                SELECT 
                    T.Parent_ID AS [FormType_Children.FormType_Children_Source.ID], 
                    T.ID AS [FormType_Children.FormType_Children_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.FormType AS T
                WHERE T.Parent_ID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [nleaps.Role](T1.Role_ID, T1.Role_Name, T1.Role_Remark)
    FROM (
        SELECT 
            T.ID AS Role_ID, 
            T.Name AS Role_Name, 
            T.Remark AS Role_Remark, 
            True AS _from0
        FROM CodeFirstDatabase.Role AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Powers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Powers
        [nleaps.Power](T1.Power_ID, T1.Power_Name, T1.Power_GroupName, T1.Power_Title, T1.Power_Remark)
    FROM (
        SELECT 
            T.ID AS Power_ID, 
            T.Name AS Power_Name, 
            T.GroupName AS Power_GroupName, 
            T.Title AS Power_Title, 
            T.Remark AS Power_Remark, 
            True AS _from0
        FROM CodeFirstDatabase.Power AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Titles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Titles
        [nleaps.Title](T1.Title_ID, T1.Title_Name, T1.Title_Remark)
    FROM (
        SELECT 
            T.ID AS Title_ID, 
            T.Name AS Title_Name, 
            T.Remark AS Title_Remark, 
            True AS _from0
        FROM CodeFirstDatabase.Title AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Forms.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Forms
        [nleaps.Form](T1.Form_ID, T1.Form_FormName, T1.Form_Content, T1.Form_CreateTime) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.FormTypes, ROW(T1.[Form_FormType.Form_FormType_Target.ID]),[nleaps.FormType]),[nleaps.Form_FormType],Form_FormType_Source,Form_FormType_Target) 
        RELATIONSHIP(CREATEREF(nleapsContext.Users, ROW(T1.[Form_User.Form_User_Target.ID]),[nleaps.User]),[nleaps.Form_User],Form_User_Source,Form_User_Target) 
    FROM (
        SELECT 
            T.ID AS Form_ID, 
            T.FormName AS Form_FormName, 
            T.Content AS Form_Content, 
            T.CreateTime AS Form_CreateTime, 
            True AS _from0, 
            T.FromTypeID AS [Form_FormType.Form_FormType_Target.ID], 
            T.UserID AS [Form_User.Form_User_Target.ID]
        FROM CodeFirstDatabase.Form AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Form_FormType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Form_FormType
        [nleaps.Form_FormType](T3.[Form_FormType.Form_FormType_Source], T3.[Form_FormType.Form_FormType_Target])
    FROM (
        SELECT -- Constructing Form_FormType_Source
            CreateRef(nleapsContext.Forms, row(T2.[Form_FormType.Form_FormType_Source.ID]), [nleaps.Form]) AS [Form_FormType.Form_FormType_Source], 
            T2.[Form_FormType.Form_FormType_Target]
        FROM (
            SELECT -- Constructing Form_FormType_Target
                T1.[Form_FormType.Form_FormType_Source.ID], 
                CreateRef(nleapsContext.FormTypes, row(T1.[Form_FormType.Form_FormType_Target.ID]), [nleaps.FormType]) AS [Form_FormType.Form_FormType_Target]
            FROM (
                SELECT 
                    T.ID AS [Form_FormType.Form_FormType_Source.ID], 
                    T.FromTypeID AS [Form_FormType.Form_FormType_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Form AS T
                WHERE T.FromTypeID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Form_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Form_User
        [nleaps.Form_User](T3.[Form_User.Form_User_Source], T3.[Form_User.Form_User_Target])
    FROM (
        SELECT -- Constructing Form_User_Source
            CreateRef(nleapsContext.Forms, row(T2.[Form_User.Form_User_Source.ID]), [nleaps.Form]) AS [Form_User.Form_User_Source], 
            T2.[Form_User.Form_User_Target]
        FROM (
            SELECT -- Constructing Form_User_Target
                T1.[Form_User.Form_User_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[Form_User.Form_User_Target.ID]), [nleaps.User]) AS [Form_User.Form_User_Target]
            FROM (
                SELECT 
                    T.ID AS [Form_User.Form_User_Source.ID], 
                    T.UserID AS [Form_User.Form_User_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Form AS T
                WHERE T.UserID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Menus.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Menus
        [nleaps.Menu](T1.Menu_ID, T1.Menu_Name, T1.Menu_ImageUrl, T1.Menu_NavigateUrl, T1.Menu_Remark, T1.Menu_SortIndex) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.Menus, ROW(T1.[Menu_Parent.Menu_Parent_Target.ID]),[nleaps.Menu]),[nleaps.Menu_Parent],Menu_Parent_Source,Menu_Parent_Target) 
        RELATIONSHIP(CREATEREF(nleapsContext.Powers, ROW(T1.[Menu_ViewPower.Menu_ViewPower_Target.ID]),[nleaps.Power]),[nleaps.Menu_ViewPower],Menu_ViewPower_Source,Menu_ViewPower_Target) 
    FROM (
        SELECT 
            T.ID AS Menu_ID, 
            T.Name AS Menu_Name, 
            T.ImageUrl AS Menu_ImageUrl, 
            T.NavigateUrl AS Menu_NavigateUrl, 
            T.Remark AS Menu_Remark, 
            T.SortIndex AS Menu_SortIndex, 
            True AS _from0, 
            T.ParentID AS [Menu_Parent.Menu_Parent_Target.ID], 
            T.ViewPowerID AS [Menu_ViewPower.Menu_ViewPower_Target.ID]
        FROM CodeFirstDatabase.Menu AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Menu_Parent.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Menu_Parent
        [nleaps.Menu_Parent](T3.[Menu_Parent.Menu_Parent_Source], T3.[Menu_Parent.Menu_Parent_Target])
    FROM (
        SELECT -- Constructing Menu_Parent_Source
            CreateRef(nleapsContext.Menus, row(T2.[Menu_Parent.Menu_Parent_Source.ID]), [nleaps.Menu]) AS [Menu_Parent.Menu_Parent_Source], 
            T2.[Menu_Parent.Menu_Parent_Target]
        FROM (
            SELECT -- Constructing Menu_Parent_Target
                T1.[Menu_Parent.Menu_Parent_Source.ID], 
                CreateRef(nleapsContext.Menus, row(T1.[Menu_Parent.Menu_Parent_Target.ID]), [nleaps.Menu]) AS [Menu_Parent.Menu_Parent_Target]
            FROM (
                SELECT 
                    T.ID AS [Menu_Parent.Menu_Parent_Source.ID], 
                    T.ParentID AS [Menu_Parent.Menu_Parent_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Menu AS T
                WHERE T.ParentID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Menu_ViewPower.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Menu_ViewPower
        [nleaps.Menu_ViewPower](T3.[Menu_ViewPower.Menu_ViewPower_Source], T3.[Menu_ViewPower.Menu_ViewPower_Target])
    FROM (
        SELECT -- Constructing Menu_ViewPower_Source
            CreateRef(nleapsContext.Menus, row(T2.[Menu_ViewPower.Menu_ViewPower_Source.ID]), [nleaps.Menu]) AS [Menu_ViewPower.Menu_ViewPower_Source], 
            T2.[Menu_ViewPower.Menu_ViewPower_Target]
        FROM (
            SELECT -- Constructing Menu_ViewPower_Target
                T1.[Menu_ViewPower.Menu_ViewPower_Source.ID], 
                CreateRef(nleapsContext.Powers, row(T1.[Menu_ViewPower.Menu_ViewPower_Target.ID]), [nleaps.Power]) AS [Menu_ViewPower.Menu_ViewPower_Target]
            FROM (
                SELECT 
                    T.ID AS [Menu_ViewPower.Menu_ViewPower_Source.ID], 
                    T.ViewPowerID AS [Menu_ViewPower.Menu_ViewPower_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Menu AS T
                WHERE T.ViewPowerID IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Onlines.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Onlines
        [nleaps.Online](T1.Online_ID, T1.Online_IPAdddress, T1.Online_LoginTime, T1.Online_UpdateTime) WITH 
        RELATIONSHIP(CREATEREF(nleapsContext.Users, ROW(T1.[Online_User.Online_User_Target.ID]),[nleaps.User]),[nleaps.Online_User],Online_User_Source,Online_User_Target) 
    FROM (
        SELECT 
            T.ID AS Online_ID, 
            T.IPAdddress AS Online_IPAdddress, 
            T.LoginTime AS Online_LoginTime, 
            T.UpdateTime AS Online_UpdateTime, 
            True AS _from0, 
            T.UserID AS [Online_User.Online_User_Target.ID]
        FROM CodeFirstDatabase.Online AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Online_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Online_User
        [nleaps.Online_User](T3.[Online_User.Online_User_Source], T3.[Online_User.Online_User_Target])
    FROM (
        SELECT -- Constructing Online_User_Source
            CreateRef(nleapsContext.Onlines, row(T2.[Online_User.Online_User_Source.ID]), [nleaps.Online]) AS [Online_User.Online_User_Source], 
            T2.[Online_User.Online_User_Target]
        FROM (
            SELECT -- Constructing Online_User_Target
                T1.[Online_User.Online_User_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[Online_User.Online_User_Target.ID]), [nleaps.User]) AS [Online_User.Online_User_Target]
            FROM (
                SELECT 
                    T.ID AS [Online_User.Online_User_Source.ID], 
                    T.UserID AS [Online_User.Online_User_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.Online AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Role_Powers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role_Powers
        [nleaps.Role_Powers](T3.[Role_Powers.Role_Powers_Source], T3.[Role_Powers.Role_Powers_Target])
    FROM (
        SELECT -- Constructing Role_Powers_Source
            CreateRef(nleapsContext.Roles, row(T2.[Role_Powers.Role_Powers_Source.ID]), [nleaps.Role]) AS [Role_Powers.Role_Powers_Source], 
            T2.[Role_Powers.Role_Powers_Target]
        FROM (
            SELECT -- Constructing Role_Powers_Target
                T1.[Role_Powers.Role_Powers_Source.ID], 
                CreateRef(nleapsContext.Powers, row(T1.[Role_Powers.Role_Powers_Target.ID]), [nleaps.Power]) AS [Role_Powers.Role_Powers_Target]
            FROM (
                SELECT 
                    T.RoleID AS [Role_Powers.Role_Powers_Source.ID], 
                    T.PowerID AS [Role_Powers.Role_Powers_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.RolePower AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Role_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Role_Users
        [nleaps.Role_Users](T3.[Role_Users.Role_Users_Source], T3.[Role_Users.Role_Users_Target])
    FROM (
        SELECT -- Constructing Role_Users_Source
            CreateRef(nleapsContext.Roles, row(T2.[Role_Users.Role_Users_Source.ID]), [nleaps.Role]) AS [Role_Users.Role_Users_Source], 
            T2.[Role_Users.Role_Users_Target]
        FROM (
            SELECT -- Constructing Role_Users_Target
                T1.[Role_Users.Role_Users_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[Role_Users.Role_Users_Target.ID]), [nleaps.User]) AS [Role_Users.Role_Users_Target]
            FROM (
                SELECT 
                    T.RoleID AS [Role_Users.Role_Users_Source.ID], 
                    T.UserID AS [Role_Users.Role_Users_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.RoleUser AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Title_Users.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Title_Users
        [nleaps.Title_Users](T3.[Title_Users.Title_Users_Source], T3.[Title_Users.Title_Users_Target])
    FROM (
        SELECT -- Constructing Title_Users_Source
            CreateRef(nleapsContext.Titles, row(T2.[Title_Users.Title_Users_Source.ID]), [nleaps.Title]) AS [Title_Users.Title_Users_Source], 
            T2.[Title_Users.Title_Users_Target]
        FROM (
            SELECT -- Constructing Title_Users_Target
                T1.[Title_Users.Title_Users_Source.ID], 
                CreateRef(nleapsContext.Users, row(T1.[Title_Users.Title_Users_Target.ID]), [nleaps.User]) AS [Title_Users.Title_Users_Target]
            FROM (
                SELECT 
                    T.TitleID AS [Title_Users.Title_Users_Source.ID], 
                    T.UserID AS [Title_Users.Title_Users_Target.ID], 
                    True AS _from0
                FROM CodeFirstDatabase.TitleUser AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Log.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Log
        [CodeFirstDatabaseSchema.Log](T1.Log_ID, T1.Log_Level, T1.Log_Logger, T1.Log_Message, T1.Log_Exception, T1.Log_LogTime)
    FROM (
        SELECT 
            T.ID AS Log_ID, 
            T.Level AS Log_Level, 
            T.Logger AS Log_Logger, 
            T.Message AS Log_Message, 
            T.Exception AS Log_Exception, 
            T.LogTime AS Log_LogTime, 
            True AS _from0
        FROM nleapsContext.Logs AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for nleapsContext.Logs.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Logs
        [nleaps.Log](T1.Log_ID, T1.Log_Level, T1.Log_Logger, T1.Log_Message, T1.Log_Exception, T1.Log_LogTime)
    FROM (
        SELECT 
            T.ID AS Log_ID, 
            T.Level AS Log_Level, 
            T.Logger AS Log_Logger, 
            T.Message AS Log_Message, 
            T.Exception AS Log_Exception, 
            T.LogTime AS Log_LogTime, 
            True AS _from0
        FROM CodeFirstDatabase.Log AS T
    ) AS T1");
        }
    }
}
